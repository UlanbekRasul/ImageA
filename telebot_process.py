import warnings
warnings.filterwarnings('ignore')

import telebot
import json
import threading
from time import sleep
import os
import hashlib
import random
from collections import defaultdict
import datetime
from config import ACCOUNTS, PROXIES, BOT_TOKEN, ADMIN_USERNAME, ADMIN_PASSWORD, ACCOUNT_SETTINGS


bot = telebot.TeleBot(BOT_TOKEN)
command_file = 'command.json'
result_file = 'result.json'


# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
authorized_users = {}
auth_states = {}
channel_states = {}
account_status = defaultdict(lambda: {'last_used': None, 'users_added': 0})


def hash_credentials(text):
    return hashlib.sha256(text.encode()).hexdigest()


def get_next_available_account():
    current_time = datetime.datetime.now()

    for account in ACCOUNTS:
        last_used = account_status[account['phone']]['last_used']
        users_added = account_status[account['phone']]['users_added']

        if last_used is None or (current_time - last_used).total_seconds() >= 12 * 3600:
            if users_added < 50:
                return account
            elif (current_time - last_used).total_seconds() >= 24 * 3600:
                account_status[account['phone']]['users_added'] = 0
                return account

    return None


def get_account_status_emoji(account):
    current_time = datetime.datetime.now()
    last_used = account_status[account['phone']]['last_used']
    users_added = account_status[account['phone']]['users_added']

    if last_used is None:
        return "‚úÖ"

    hours_passed = (current_time - last_used).total_seconds() / 3600
    if hours_passed >= 24:
        return "‚úÖ"
    elif hours_passed >= 12 and users_added < 50:
        return "‚úÖ"
    else:
        return "‚è≥"


def require_auth(func):
    def wrapper(message, *args, **kwargs):
        if message.chat.id not in authorized_users or not authorized_users[message.chat.id]:
            bot.reply_to(message, "‚õî –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
            return
        return func(message, *args, **kwargs)

    return wrapper


@bot.message_handler(commands=['start'])
def start_command(message):
    if message.chat.id in authorized_users and authorized_users[message.chat.id]:
        bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    else:
        bot.reply_to(message,
                     "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞.")


@bot.message_handler(commands=['login'])
def login_command(message):
    if message.chat.id in authorized_users and authorized_users[message.chat.id]:
        bot.reply_to(message, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return

    auth_states[message.chat.id] = {'state': 'waiting_username'}
    bot.reply_to(message, "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")


@bot.message_handler(commands=['logout'])
@require_auth
def logout_command(message):
    authorized_users[message.chat.id] = False
    if message.chat.id in auth_states:
        del auth_states[message.chat.id]
    if message.chat.id in channel_states:
        del channel_states[message.chat.id]
    bot.reply_to(message, "üëã –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")


@bot.message_handler(commands=['status'])
@require_auth
def status_command(message):
    current_time = datetime.datetime.now()
    status_message = "üì± –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"

    for account in ACCOUNTS:
        phone = account['phone']
        status = account_status[phone]
        last_used = status['last_used']
        users_added = status['users_added']
        emoji = get_account_status_emoji(account)

        status_message += f"{emoji} –ê–∫–∫–∞—É–Ω—Ç: {phone}\n"
        status_message += f"‚îî –î–æ–±–∞–≤–ª–µ–Ω–æ: {users_added}/{ACCOUNT_SETTINGS['users_per_account']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"

        if last_used:
            next_available = last_used + datetime.timedelta(hours=ACCOUNT_SETTINGS['cooldown_hours'])
            if current_time >= next_available:
                status_message += f"‚îî –î–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å\n"
            else:
                time_remaining = next_available - current_time
                hours = int(time_remaining.total_seconds() // 3600)
                minutes = int((time_remaining.total_seconds() % 3600) // 60)
                status_message += f"‚îî –ë—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {hours}—á {minutes}–º–∏–Ω\n"
        else:
            status_message += f"‚îî –î–æ—Å—Ç—É–ø–µ–Ω —Å–µ–π—á–∞—Å\n"

        status_message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users_added = sum(account_status[acc['phone']]['users_added'] for acc in ACCOUNTS)
    total_capacity = len(ACCOUNTS) * ACCOUNT_SETTINGS['users_per_account']

    status_message += f"""
üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_users_added}/{total_capacity}
‚Ä¢ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {ACCOUNT_SETTINGS['batch_size']}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {ACCOUNT_SETTINGS['invites_per_run']}
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤: {ACCOUNT_SETTINGS['cooldown_hours']} —á–∞—Å–æ–≤
"""

    bot.reply_to(message, status_message)


@bot.message_handler(commands=['help'])
@require_auth
def help_command(message):
    help_text = """
üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/add - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª
/get_channel_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
/get_channel_participants_data - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:
‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—É–∑–∞ 12 —á–∞—Å–æ–≤
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å username
"""
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['get_channel_info'])
@require_auth
def get_channel_info_command(message):
    msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @example):")
    bot.register_next_step_handler(msg, process_channel_info)


@require_auth
def process_channel_info(message):
    channel_username = message.text.strip()
    if channel_username:
        command_data = {
            "command": "get_channel_info",
            "channel": channel_username,
            "chat_id": message.chat.id,
            "account": ACCOUNTS[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        }
        with open(command_file, 'w') as file:
            json.dump(command_data, file)
        bot.reply_to(message, "‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.")


@bot.message_handler(commands=['get_channel_participants_data'])
@require_auth
def get_participants_command(message):
    msg = bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞:")
    bot.register_next_step_handler(msg, process_participants_request)


@require_auth
def process_participants_request(message):
    channel_username = message.text.strip()
    if channel_username:
        command_data = {
            "command": "get_channel_participants_data",
            "channel": channel_username,
            "chat_id": message.chat.id,
            "account": ACCOUNTS[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        }
        with open(command_file, 'w') as file:
            json.dump(command_data, file)
        bot.reply_to(message, "‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    else:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞.")


@bot.message_handler(func=lambda message: message.chat.id in auth_states)
def handle_auth(message):
    chat_id = message.chat.id
    state = auth_states.get(chat_id, {}).get('state')

    if state == 'waiting_username':
        if hash_credentials(message.text) == hash_credentials(ADMIN_USERNAME):
            auth_states[chat_id] = {'state': 'waiting_password', 'username': message.text}
            bot.reply_to(message, "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        else:
            del auth_states[chat_id]
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")

    elif state == 'waiting_password':
        if hash_credentials(message.text) == hash_credentials(ADMIN_PASSWORD):
            authorized_users[chat_id] = True
            del auth_states[chat_id]
            bot.reply_to(message, """
‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/add - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª
/get_channel_info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
/get_channel_participants_data - –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
""")
        else:
            del auth_states[chat_id]
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /login —Å–Ω–æ–≤–∞.")


@bot.message_handler(commands=['add'])
@require_auth
def add_command(message):
    available_accounts = []
    current_time = datetime.datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
    for account in ACCOUNTS:
        last_used = account_status[account['phone']]['last_used']
        users_added = account_status[account['phone']]['users_added']

        if (last_used is None or
                (current_time - last_used).total_seconds() >= ACCOUNT_SETTINGS['cooldown_hours'] * 3600):
            if users_added < ACCOUNT_SETTINGS['users_per_account']:
                available_accounts.append(account)
            elif (current_time - last_used).total_seconds() >= 24 * 3600:
                account_status[account['phone']]['users_added'] = 0
                available_accounts.append(account)

    if not available_accounts:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
        next_available_time = min(
            (account_status[acc['phone']]['last_used'] +
             datetime.timedelta(hours=ACCOUNT_SETTINGS['cooldown_hours']))
            for acc in ACCOUNTS
            if account_status[acc['phone']]['last_used'] is not None
        )

        time_remaining = next_available_time - current_time
        hours = int(time_remaining.total_seconds() // 3600)
        minutes = int((time_remaining.total_seconds() % 3600) // 60)

        wait_message = f"""
‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚ÑπÔ∏è –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {ACCOUNT_SETTINGS['users_per_account']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑:
{hours}—á {minutes}–º–∏–Ω
"""
        bot.reply_to(message, wait_message)
        return

    channel_states[message.chat.id] = {
        'state': 'waiting_source',
        'accounts': available_accounts
    }

    bot.reply_to(message, f"""
üì• –í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –û–¢–ö–£–î–ê –±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ù–∞–ø—Ä–∏–º–µ—Ä: @channel

‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(available_accounts)}/{len(ACCOUNTS)}
üìä –ü–ª–∞–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ {ACCOUNT_SETTINGS['batch_size']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ä–∞–∑
‚Ä¢ {ACCOUNT_SETTINGS['invites_per_run']} —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥
‚Ä¢ –í—Å–µ–≥–æ {ACCOUNT_SETTINGS['users_per_account']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ {len(available_accounts) * ACCOUNT_SETTINGS['users_per_account']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏: {ACCOUNT_SETTINGS['delay_between_adds']} —Å–µ–∫—É–Ω–¥
üïí –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {ACCOUNT_SETTINGS['delay_between_accounts']} —Å–µ–∫—É–Ω–¥
""")


@bot.message_handler(func=lambda message:
message.chat.id in channel_states and
channel_states[message.chat.id].get('state') in ['waiting_source', 'waiting_target'])
@require_auth
def handle_channel_input(message):
    chat_id = message.chat.id
    state = channel_states[chat_id]['state']
    available_accounts = channel_states[chat_id]['accounts']

    if state == 'waiting_source':
        source_channel = message.text.strip()
        if not source_channel.startswith('@'):
            bot.reply_to(message, "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
            return

        channel_states[chat_id].update({
            'state': 'waiting_target',
            'source_channel': source_channel
        })
        bot.reply_to(message, "üì§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞ –ö–£–î–ê –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–ù–∞–ø—Ä–∏–º–µ—Ä: @channel")

    elif state == 'waiting_target':
        target_channel = message.text.strip()
        if not target_channel.startswith('@'):
            bot.reply_to(message, "‚ùå Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
            return

        command_data = {
            'command': 'add_user_to_channel',
            'source_channel': channel_states[chat_id]['source_channel'],
            'target_channel': target_channel,
            'chat_id': chat_id,
            'accounts': [acc['phone'] for acc in available_accounts],
            'batch_size': ACCOUNT_SETTINGS['batch_size'],
            'invites_per_run': ACCOUNT_SETTINGS['invites_per_run'],
            'delay_between_adds': ACCOUNT_SETTINGS['delay_between_adds'],
            'delay_between_accounts': ACCOUNT_SETTINGS['delay_between_accounts']
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open(command_file, 'w') as file:
            json.dump(command_data, file)

        bot.reply_to(message, f"""
        ‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ–∑–¥–∞–Ω–∞!
        üì• –ò—Å—Ç–æ—á–Ω–∏–∫: {channel_states[chat_id]['source_channel']}
        üì§ –¶–µ–ª—å: {target_channel}
        ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–Ω—ë—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!
                """)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        del channel_states[chat_id]
def check_for_results():
    while True:
        try:
            if os.path.exists(result_file):
                with open(result_file, 'r') as file:
                    result = json.load(file)
                    if 'chat_id' in result and 'data' in result:
                        bot.send_message(result['chat_id'], result['data'])
                        open(result_file, 'w').close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        sleep(5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
result_thread = threading.Thread(target=check_for_results, daemon=True)
result_thread.start()

if __name__ == "__main__":
    print("Telebot –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)
