import os
import json
import asyncio
import logging
from telethon import TelegramClient, events
from telethon.tl.functions.channels import GetFullChannelRequest, GetParticipantsRequest
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.types import ChannelParticipantsSearch, User
from telethon.errors import *
from telethon.tl.functions.messages import ExportChatInviteRequest
import datetime
import random
from typing import List, Tuple, Dict, Set, Optional
from tracking import UserTracker
from config import ACCOUNTS, PROXIES, ACCOUNT_SETTINGS

# –§–∞–π–ª—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
command_file = 'command.json'
result_file = 'result.json'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
tracker = UserTracker()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
clients = {}

class VerificationData:
    def __init__(self):
        self.initial_count: int = 0
        self.final_count: int = 0
        self.initial_members: Set[int] = set()
        self.final_members: Set[int] = set()
        self.join_events: List[int] = []
        self.verified_users: List[str] = []
        self.start_time: datetime.datetime = datetime.datetime.now()

    @property
    def count_difference(self) -> int:
        return self.final_count - self.initial_count

    @property
    def new_members(self) -> Set[int]:
        return self.final_members - self.initial_members

    @property
    def duration(self) -> float:
        return (datetime.datetime.now() - self.start_time).total_seconds()

class AdditionResult:
    def __init__(self):
        self.successful_users: List[str] = []
        self.failed_users: List[str] = []
        self.dm_sent: List[str] = []
        self.total_attempted: int = 0
        self.start_time: datetime.datetime = datetime.datetime.now()
        self.end_time: datetime.datetime = None
        self.verification_data: VerificationData = VerificationData()

    def complete(self):
        self.end_time = datetime.datetime.now()

    @property
    def duration(self) -> datetime.timedelta:
        end = self.end_time or datetime.datetime.now()
        return end - self.start_time

    @property
    def success_rate(self) -> float:
        if not self.total_attempted:
            return 0.0
        return len(self.successful_users) / self.total_attempted * 100

async def get_or_create_client(account):
    phone = account['phone']

    if phone not in clients:
        device_model = f"Samsung Galaxy S{random.randint(20, 23)}"
        system_version = f"Android {random.randint(10, 13)}.0"

        try:
            proxy = account['proxy']
            client = TelegramClient(
                f'session_{phone}',
                account['api_id'],
                account['api_hash'],
                device_model=device_model,
                system_version=system_version,
                app_version="10.0.0",
                proxy={
                    'proxy_type': proxy['scheme'],
                    'addr': proxy['hostname'],
                    'port': proxy['port'],
                    'username': proxy['username'],
                    'password': proxy['password'],
                    'rdns': True
                }
            )

            print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–∫–∫–∞—É–Ω—Ç—É {phone} —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy['hostname']}")
            await client.connect()

            if not await client.is_user_authorized():
                print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {phone}")
                await client.start(phone)

            clients[phone] = client
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è {phone}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è {phone}: {str(e)}")
            raise e

    return clients[phone]

async def send_result(chat_id, message):
    with open(result_file, 'w') as file:
        json.dump({"chat_id": chat_id, "data": message}, file)

async def verify_user_added(client, channel, user) -> bool:
    try:
        participants = await client.get_participants(
            channel,
            search=user.username,
            limit=1
        )
        return bool(participants and participants[0].id == user.id)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user.username}: {str(e)}")
        return False

async def send_invite_message(client, user, target_channel, invite_link):
    try:
        promo_text = f"""
–ü—Ä–∏–≤–µ—Ç!
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É –¥–ª—è —à–≤–µ–π–Ω–∏–∫–æ–≤ –ë–∏—à–∫–µ–∫–∞ ‚úÇÔ∏è: {target_channel}
–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —à–≤–µ–π–Ω—ã–µ —Ü–µ—Ö–∞ ‚úÖ
–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üí°
–¢—Ä–µ–Ω–¥—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ üßµ
–≠–∫–æ–Ω–æ–º—å—Ç–µ –≤—Ä–µ–º—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Å –Ω–∞–º–∏!
üëâ {'@impactsew_ru'}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ {target_channel}
"""
        await client.send_message(user.username, promo_text)
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {user.username}: {str(e)}")
        return False


async def hybrid_verification(client, target_entity, result: AdditionResult):
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final_channel = await client(GetFullChannelRequest(target_entity))
        result.verification_data.final_count = final_channel.full_chat.participants_count

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        final_participants = await client.get_participants(target_entity, limit=1000)
        result.verification_data.final_members = set(user.id for user in final_participants)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
        verified_users = []
        for username in result.successful_users:
            if await verify_user_added(client, target_entity, username):
                verified_users.append(username)

        result.verification_data.verified_users = verified_users

        return {
            'verified_count': len(verified_users),
            'total_difference': result.verification_data.count_difference,
            'new_members': len(result.verification_data.new_members),
            'success_rate': (len(verified_users) / len(result.successful_users) * 100) if result.successful_users else 0
        }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
        return None


async def add_users_to_channel(
        client,
        source_entity,
        target_entity,
        users_to_add: List[User],
        phone: str
) -> AdditionResult:
    result = AdditionResult()
    result.total_attempted = len(users_to_add)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    try:
        initial_channel = await client(GetFullChannelRequest(target_entity))
        result.verification_data.initial_count = initial_channel.full_chat.participants_count

        initial_participants = await client.get_participants(target_entity, limit=1000)
        result.verification_data.initial_members = set(user.id for user in initial_participants)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    try:
        invite_link = await client(ExportChatInviteRequest(peer=target_entity))
        invite_url = invite_link.link
    except FloodWaitError as e:
        print(f"‚è≥ Flood wait: –∂–¥–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(e.seconds)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}")
        invite_url = None

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
    @client.on(events.ChatAction)
    async def handler(event):
        if event.user_joined:
            result.verification_data.join_events.append(event.user_id)

    for user in users_to_add:
        try:
            if not isinstance(user, User) or not user.username:
                result.failed_users.append(f"{user.id} (–Ω–µ—Ç username)")
                continue

            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await client(InviteToChannelRequest(
                target_entity,
                [user]
            ))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if await verify_user_added(client, target_entity, user):
                result.successful_users.append(user.username)
            else:
                result.failed_users.append(f"{user.username} (–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ)")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if invite_url and await send_invite_message(client, user, target_entity.username, invite_url):
                    result.dm_sent.append(user.username)

            await asyncio.sleep(random.uniform(2, 4))

        except (UserPrivacyRestrictedError, UserNotMutualContactError,
                UserBannedInChannelError, FloodWaitError) as e:
            result.failed_users.append(f"{user.username} ({str(e)})")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if invite_url and await send_invite_message(client, user, target_entity.username, invite_url):
                result.dm_sent.append(user.username)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {user.username}: {str(e)}")
            result.failed_users.append(f"{user.username} (–æ—à–∏–±–∫–∞)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        account_stats = tracker.get_account_status(phone)
        if account_stats['total_added'] >= 50:
            break

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π
    await asyncio.sleep(10)

    # –ü—Ä–æ–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verification_results = await hybrid_verification(client, target_entity, result)

    result.complete()
    return result


async def get_valid_participants(client, channel, limit: int = 50) -> List[User]:
    participants = []
    offset = 0

    while len(participants) < limit:
        try:
            chunk = await client(GetParticipantsRequest(
                channel,
                ChannelParticipantsSearch(''),
                offset,
                limit=100,
                hash=0
            ))

            if not chunk.users:
                break

            for user in chunk.users:
                if (isinstance(user, User) and
                        user.username and
                        not user.bot and
                        not user.deleted and
                        len(participants) < limit):
                    participants.append(user)

            offset += len(chunk.users)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {str(e)}")
            break

    return participants


async def add_user_to_channel(account, source_channel, target_channel, chat_id):
    phone = account['phone']

    try:
        client = await get_or_create_client(account)

        source_entity = await client.get_entity(source_channel)
        target_entity = await client.get_entity(target_channel)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
        account_stats = tracker.get_account_status(phone)
        remaining_capacity = account_stats['remaining_capacity']

        if remaining_capacity <= 0:
            await send_result(chat_id, f"""
‚ùå –ê–∫–∫–∞—É–Ω—Ç {phone} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞
‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑:
{account_stats['time_remaining']['hours']}—á {account_stats['time_remaining']['minutes']}–º
""")
            return 0

        # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        all_participants = await get_valid_participants(
            client,
            source_entity,
            min(50, remaining_capacity)
        )

        if not all_participants:
            await send_result(chat_id, "‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return 0

        total_added = 0
        batches = [all_participants[i:i + 25] for i in range(0, len(all_participants), 25)]

        for batch_num, batch in enumerate(batches, 1):
            addition_result = await add_users_to_channel(
                client,
                source_entity,
                target_entity,
                batch,
                phone
            )

            successful_count = len(addition_result.verification_data.verified_users)
            total_added += successful_count

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            tracker.record_addition(phone, successful_count, target_channel)
            status = tracker.get_account_status(phone)

            verification_stats = addition_result.verification_data

            report = f"""
‚úÖ –ì—Ä—É–ø–ø–∞ {batch_num}/{len(batches)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
üì± –ê–∫–∫–∞—É–Ω—Ç: {phone}

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {len(verification_stats.verified_users)}/{len(batch)}
‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {len(addition_result.failed_users)}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –õ–°: {len(addition_result.dm_sent)}
‚Ä¢ –í—Å–µ–≥–æ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏: {total_added}/{len(all_participants)}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {addition_result.success_rate:.1f}%
‚Ä¢ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {addition_result.duration.seconds}—Å

üìà –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:
‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ: {verification_stats.initial_count}
‚Ä¢ –°–µ–π—á–∞—Å –≤ –∫–∞–Ω–∞–ª–µ: {verification_stats.final_count}
‚Ä¢ –ü—Ä–∏—Ä–æ—Å—Ç: {verification_stats.count_difference}
‚Ä¢ –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(verification_stats.new_members)}

üîÑ –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞:
‚Ä¢ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {status['total_added']}/50
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {status['remaining_capacity']}
‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {status['last_24h_adds']}

‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑:
{status['time_remaining']['hours']}—á {status['time_remaining']['minutes']}–º {status['time_remaining']['seconds']}—Å

‚ùå –û—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
{chr(10).join(addition_result.failed_users[:5])}
{f'...–∏ –µ—â–µ {len(addition_result.failed_users) - 5}' if len(addition_result.failed_users) > 5 else ''}

üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –õ–°:
{chr(10).join(addition_result.dm_sent[:5])}
{f'...–∏ –µ—â–µ {len(addition_result.dm_sent) - 5}' if len(addition_result.dm_sent) > 5 else ''}
"""
            await send_result(chat_id, report)

            if batch_num < len(batches):
                await send_result(chat_id, f"‚è≥ –ü–∞—É–∑–∞ {ACCOUNT_SETTINGS['delay_between_adds']} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(ACCOUNT_SETTINGS['delay_between_adds'])

        return total_added

    except Exception as e:
        error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {phone}: {str(e)}"
        await send_result(chat_id, error_message)
        return 0


async def check_remaining_users(client, target_entity):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    try:
        source_participants = await client.get_participants(target_entity, limit=1)
        return bool(source_participants)
    except Exception:
        return False




async def get_channel_info(channel_username, chat_id, account):
    try:
        client = await get_or_create_client(account)
        channel = await client.get_entity(channel_username)
        full_channel = await client(GetFullChannelRequest(channel))

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å username
        valid_participants = []
        total_checked = 0

        await send_result(chat_id, "üîÑ –ò–¥–µ—Ç –ø–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å username...")

        async for participant in client.iter_participants(channel):
            total_checked += 1
            if participant.username:
                valid_participants.append(participant)

            if total_checked % 1000 == 0:
                progress = (total_checked / full_channel.full_chat.participants_count) * 100
                await send_result(chat_id, f"""
üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {total_checked}/{full_channel.full_chat.participants_count}
üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%
‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å username: {len(valid_participants)}
""")

        users_with_username = len(valid_participants)

        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        users_per_day = len(ACCOUNTS) * 100  # 8 –∞–∫–∫–∞—É–Ω—Ç–æ–≤ * 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π * 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å
        days_needed = users_with_username / users_per_day
        hours_needed = days_needed * 24

        full_days = int(days_needed)
        remaining_hours = int((days_needed - full_days) * 24)

        info = f"""
üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {channel_username}:

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {full_channel.full_chat.participants_count}
‚Ä¢ –° username: {users_with_username}
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {(users_with_username / full_channel.full_chat.participants_count * 100):.1f}%
  (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å username –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã)

üìù –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞:
‚Ä¢ ID: {channel.id}
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {channel.title}
‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: {'–î–∞' if channel.username is None else '–ù–µ—Ç'}

üí° –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ACCOUNTS)}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –¥–µ–Ω—å: {users_per_day} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  ({len(ACCOUNTS)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ √ó 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π √ó 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å)
‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {full_days} –¥–Ω–µ–π {remaining_hours} —á–∞—Å–æ–≤
  (—Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø–∞—É–∑)

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç 50 —á–µ–ª–æ–≤–µ–∫ –∑–∞ —Ü–∏–∫–ª
‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–∞—É–∑–∞ 12 —á–∞—Å–æ–≤
‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å 2 —Ü–∏–∫–ª–∞ –≤ —Å—É—Ç–∫–∏
"""
        await send_result(chat_id, info)

    except Exception as e:
        await send_result(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def get_channel_participants_data(channel_username, chat_id, account):
    try:
        client = await get_or_create_client(account)
        channel = await client.get_entity(channel_username)

        await send_result(chat_id, "üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö...")

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        participants = await client.get_participants(
            channel,
            limit=50,
            aggressive=True  # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        )

        info_chunks = []
        current_chunk = f"""
üë• –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞ {channel.title}
üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {len(participants)}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""

        for p in participants:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            status = "–û–Ω–ª–∞–π–Ω" if getattr(p.status, 'online', False) else "–û—Ñ—Ñ–ª–∞–π–Ω"
            last_seen = getattr(p.status, 'was_online', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º –∏–ª–∏ –ø—Ä–µ–º–∏—É–º
            is_bot = "–î–∞" if p.bot else "–ù–µ—Ç"
            is_premium = "–î–∞" if getattr(p, 'premium', False) else "–ù–µ—Ç"

            user_info = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
‚Ä¢ ID: {p.id}
‚Ä¢ –ò–º—è: {p.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –§–∞–º–∏–ª–∏—è: {p.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ Username: @{p.username or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {'+' + str(p.phone) if p.phone else '–°–∫—Ä—ã—Ç'}

üì± –°—Ç–∞—Ç—É—Å:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {status}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {last_seen}
‚Ä¢ –ë–æ—Ç: {is_bot}
‚Ä¢ Premium: {is_premium}

üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:
‚Ä¢ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {'–î–æ—Å—Ç—É–ø–Ω–æ' if p.photo else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç/–°–∫—Ä—ã—Ç–æ'}
‚Ä¢ Verified: {'–î–∞' if p.verified else '–ù–µ—Ç'}
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω: {'–î–∞' if p.restricted else '–ù–µ—Ç'}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ —Å—Ç–∞–Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
            if len(current_chunk) + len(user_info) > 4000:
                info_chunks.append(current_chunk)
                current_chunk = user_info
            else:
                current_chunk += user_info

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk:
            info_chunks.append(current_chunk)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
        bots_count = sum(1 for p in participants if p.bot)
        premium_count = sum(1 for p in participants if getattr(p, 'premium', False))
        with_username = sum(1 for p in participants if p.username)

        stats = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(participants)}
‚Ä¢ –° username: {with_username} ({(with_username / len(participants) * 100):.1f}%)
‚Ä¢ –ë–æ—Ç–æ–≤: {bots_count} ({(bots_count / len(participants) * 100):.1f}%)
‚Ä¢ Premium: {premium_count} ({(premium_count / len(participants) * 100):.1f}%)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

"""
        info_chunks[0] = stats + info_chunks[0]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞–Ω–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        total_chunks = len(info_chunks)
        for i, chunk in enumerate(info_chunks, 1):
            progress = f"[{i}/{total_chunks}] "
            await send_result(chat_id, progress + chunk)
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞–Ω–∫–æ–≤

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = f"""
‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!
üìä –ò—Ç–æ–≥–∏:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(info_chunks)}
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {sum(len(chunk) for chunk in info_chunks)} —Å–∏–º–≤–æ–ª–æ–≤
"""
        await send_result(chat_id, summary)

    except Exception as e:
        error_message = f"""
‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:
‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {str(e)}

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
"""
        await send_result(chat_id, error_message)


async def monitor_command_file():
    auto_resume_tasks = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    async def schedule_auto_resume(source_channel, target_channel, chat_id):
        while True:
            try:
                current_time = datetime.datetime.now()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                client = await get_or_create_client(ACCOUNTS[0])
                source_entity = await client.get_entity(source_channel)
                source_participants = await get_valid_participants(client, source_entity, limit=1)

                if not source_participants:
                    await send_result(chat_id, """
‚úÖ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã!
üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
""")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                available_accounts = []
                next_available_time = None

                for account in ACCOUNTS:
                    status = tracker.get_account_status(account['phone'])
                    if status['remaining_capacity'] > 0:
                        available_accounts.append(account)
                    elif status['time_remaining']['hours'] > 0:
                        if next_available_time is None or status['time_remaining']['hours'] < next_available_time:
                            next_available_time = status['time_remaining']['hours']

                if available_accounts:
                    await send_result(chat_id, f"""
üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(available_accounts)}/{len(ACCOUNTS)}
‚Ä¢ –ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫: {source_channel}
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_channel}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(await get_valid_participants(client, source_entity))}
""")

                    command_data = {
                        "command": "add_user_to_channel",
                        "source_channel": source_channel,
                        "target_channel": target_channel,
                        "chat_id": chat_id,
                        "accounts": [acc['phone'] for acc in available_accounts]
                    }

                    with open(command_file, 'w') as f:
                        json.dump(command_data, f)
                else:
                    if next_available_time:
                        await send_result(chat_id, f"""
‚è≥ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–∞—É–∑–µ
‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑: {next_available_time}—á
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
""")

                await asyncio.sleep(12 * 3600)  # –ñ–¥–µ–º 12 —á–∞—Å–æ–≤

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
                await asyncio.sleep(300)  # –ü–∞—É–∑–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    while True:
        try:
            if os.path.exists(command_file) and os.path.getsize(command_file) > 0:
                with open(command_file, 'r') as file:
                    command_data = json.load(file)

                if command_data.get('command') == "add_user_to_channel":
                    total_added = 0
                    successful_accounts = 0
                    failed_accounts = []
                    accounts = [acc for acc in ACCOUNTS if acc['phone'] in command_data.get('accounts', [])]

                    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    client = await get_or_create_client(accounts[0])
                    target_entity = await client.get_entity(command_data['target_channel'])
                    initial_members = await client.get_participants(target_entity, limit=0)
                    initial_count = len(initial_members)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
                    available_accounts = []
                    for account in accounts:
                        status = tracker.get_account_status(account['phone'])
                        if status['remaining_capacity'] > 0:
                            available_accounts.append(account)
                        else:
                            time_remaining = status['time_remaining']
                            failed_accounts.append({
                                'phone': account['phone'],
                                'reason': f"–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –î–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {time_remaining['hours']}—á {time_remaining['minutes']}–º"
                            })

                    if not available_accounts:
                        next_available = min(
                            (acc for acc in failed_accounts),
                            key=lambda x: int(x['reason'].split('—á–µ—Ä–µ–∑ ')[1].split('—á')[0])
                        )

                        await send_result(command_data['chat_id'], f"""
‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!

üì± –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
{chr(10).join(f"‚Ä¢ {acc['phone']}: {acc['reason']}" for acc in failed_accounts)}

‚è≥ –ë–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç:
‚Ä¢ {next_available['phone']}
‚Ä¢ {next_available['reason']}
""")

                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        channel_key = f"{command_data['source_channel']}_{command_data['target_channel']}"
                        if channel_key not in auto_resume_tasks:
                            task = asyncio.create_task(schedule_auto_resume(
                                command_data['source_channel'],
                                command_data['target_channel'],
                                command_data['chat_id']
                            ))
                            auto_resume_tasks[channel_key] = task

                            await send_result(command_data['chat_id'], """
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
‚Ä¢ –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop
""")
                        continue

                    # –†–∞–±–æ—Ç–∞–µ–º —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
                    await send_result(command_data['chat_id'], f"""
üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–≤–∞–π—Ç–∏–Ω–≥–∞
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(available_accounts)}/{len(accounts)}
‚Ä¢ –ö–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫: {command_data['source_channel']}
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {command_data['target_channel']}
‚Ä¢ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {initial_count}
""")

                    for i, account in enumerate(available_accounts):
                        try:
                            account_status = tracker.get_account_status(account['phone'])

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
                            pre_add_count = len(await client.get_participants(target_entity, limit=0))

                            await send_result(command_data['chat_id'], f"""
                    üì± –†–∞–±–æ—Ç–∞–µ–º —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {account['phone']}
                    ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {account_status['remaining_capacity']}
                    ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á: {account_status['last_24h_adds']}
                    ‚Ä¢ –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {pre_add_count}
                    """)

                            added = await add_user_to_channel(
                                account=account,
                                source_channel=command_data['source_channel'],
                                target_channel=command_data['target_channel'],
                                chat_id=command_data['chat_id']
                            )

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö
                            post_add_count = len(await client.get_participants(target_entity, limit=0))
                            actual_added = post_add_count - pre_add_count

                            if actual_added > 0:
                                total_added += actual_added
                                successful_accounts += 1
                                await send_result(command_data['chat_id'], f"""
                    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:
                    ‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {actual_added}
                    ‚Ä¢ –í—Å–µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ: {post_add_count}
                    """)
                            else:
                                failed_accounts.append({
                                    'phone': account['phone'],
                                    'reason': "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                                })

                            if i < len(available_accounts) - 1:
                                next_account = available_accounts[i + 1]
                                next_status = tracker.get_account_status(next_account['phone'])
                                await send_result(command_data['chat_id'], f"""
                    ‚è≥ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...
                    üì± –°–ª–µ–¥—É—é—â–∏–π: {next_account['phone']}
                    üìä –î–æ—Å—Ç—É–ø–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–π: {next_status['remaining_capacity']}
                    ‚è∞ –ü–∞—É–∑–∞ {ACCOUNT_SETTINGS['delay_between_accounts']} —Å–µ–∫—É–Ω–¥...
                    """)
                                await asyncio.sleep(ACCOUNT_SETTINGS['delay_between_accounts'])

                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ {account['phone']}: {str(e)}")
                            failed_accounts.append({
                                'phone': account['phone'],
                                'reason': f"–û—à–∏–±–∫–∞: {str(e)}"
                            })
                            continue

                        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    final_count = len(await client.get_participants(target_entity, limit=0))
                    total_added_verified = final_count - initial_count

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
                    overall_stats = tracker.get_overall_stats()
                    summary = f"""
                    {'‚úÖ' if successful_accounts > 0 else '‚ö†Ô∏è'} –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!

                    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã:
                    ‚Ä¢ –ë—ã–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {initial_count}
                    ‚Ä¢ –°—Ç–∞–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {final_count}
                    ‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total_added_verified}
                    ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {successful_accounts}/{len(accounts)}
                    ‚Ä¢ –ó–∞ 24 —á–∞—Å–∞ –≤—Å–µ–≥–æ: {overall_stats['total_added_24h']}
                    ‚Ä¢ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {overall_stats['total_added_all_time']}

                    üì± –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
                    {chr(10).join(f"‚Ä¢ {acc['phone']}: {acc['reason']}" for acc in failed_accounts)} 

                    ‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫:
                    ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {overall_stats['accounts_available']}/{len(ACCOUNTS)}
                    ‚Ä¢ –ö–∞–∂–¥—ã–π –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    ‚Ä¢ –ù–æ–≤—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
                    """
                    await send_result(command_data['chat_id'], summary)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                    source_entity = await client.get_entity(command_data['source_channel'])
                    remaining_users = len(await get_valid_participants(client, source_entity))

                    if remaining_users > 0:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                        channel_key = f"{command_data['source_channel']}_{command_data['target_channel']}"
                        if channel_key not in auto_resume_tasks:
                            task = asyncio.create_task(schedule_auto_resume(
                                command_data['source_channel'],
                                command_data['target_channel'],
                                command_data['chat_id']
                            ))
                            auto_resume_tasks[channel_key] = task

                            await send_result(command_data['chat_id'], f"""
                    üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
                    ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {remaining_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    ‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
                    ‚Ä¢ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop
                    """)

                elif command_data.get('command') == "stop_auto_resume":
                    channel_key = f"{command_data['source_channel']}_{command_data['target_channel']}"
                    if channel_key in auto_resume_tasks:
                        auto_resume_tasks[channel_key].cancel()
                        del auto_resume_tasks[channel_key]
                        await send_result(command_data['chat_id'], """
                    ‚èπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                    ‚Ä¢ –î–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add
                    """)

                elif command_data.get('command') == "get_channel_info":
                    await get_channel_info(
                        command_data['channel'],
                        command_data['chat_id'],
                        command_data['account']
                    )

                elif command_data.get('command') == "get_channel_participants_data":
                    await get_channel_participants_data(
                        command_data['channel'],
                        command_data['chat_id'],
                        command_data['account']
                    )

                open(command_file, 'w').close()

                await asyncio.sleep(1)

        except Exception as e:
            error_message = f"""
                    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã:
                    ‚Ä¢ –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}
                    ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {str(e)}

                    üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ
                    """
            print(error_message)
            try:
                await send_result(command_data['chat_id'], error_message)
            except:
                pass
            await asyncio.sleep(5)


async def main():
    print("‚úÖ Telethon –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
    await monitor_command_file()


if __name__ == "__main__":
    asyncio.run(main())
