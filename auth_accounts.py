# auth_accounts.py

import asyncio
from telethon import TelegramClient
from telethon.errors import FloodWaitError, PhoneNumberBannedError
import os
import glob
import random
import json
from typing import List, Tuple, Dict
from config import ACCOUNTS, ACCOUNT_SETTINGS

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
AUTH_STATUS_FILE = 'auth_status.json'


class AuthResult:
    def __init__(self, phone: str):
        self.phone = phone
        self.success = False
        self.session_created = False
        self.error = None
        self.attempts = 0
        self.last_attempt = None


async def check_proxy(proxy: Dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–∫—Å–∏"""
    try:
        client = TelegramClient(
            "proxy_check_session",
            api_id="1",
            api_hash="temp",
            proxy={
                'proxy_type': proxy['scheme'],
                'addr': proxy['hostname'],
                'port': proxy['port'],
                'username': proxy['username'],
                'password': proxy['password'],
                'rdns': True
            }
        )
        await client.connect()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ {proxy['hostname']}: {str(e)}")
        return False
    finally:
        if os.path.exists("proxy_check_session.session"):
            os.remove("proxy_check_session.session")

async def verify_account_access(client):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∫ API"""
    try:
        me = await client.get_me()
        return True
    except Exception:
        return False

def cleanup_sessions():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏"""
    session_pattern = "session_*.session"
    cleaned = 0
    for session_file in glob.glob(session_pattern):
        try:
            os.remove(session_file)
            print(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
            cleaned += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {session_file}: {str(e)}")
    return cleaned


async def auth_account(account: Dict, result: AuthResult) -> bool:
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"""
    result.attempts += 1

    print(f"\nüì± –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone']}")

    proxy = account['proxy']
    session_file = f"session_{account['phone']}.session"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
    if not await check_proxy(proxy):
        result.error = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏"
        return False

    device_model = f"Samsung Galaxy S{random.randint(20, 23)}"
    system_version = f"Android {random.randint(10, 13)}.0"

    try:
        client = TelegramClient(
            session_file,
            account['api_id'],
            account['api_hash'],
            device_model=device_model,
            system_version=system_version,
            app_version="10.0.0",
            proxy={
                'proxy_type': proxy['scheme'],
                'addr': proxy['hostname'],
                'port': proxy['port'],
                'username': proxy['username'],
                'password': proxy['password'],
                'rdns': True
            }
        )

        print(f"üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy['hostname']}...")
        await client.connect()

        if not await client.is_user_authorized():
            try:
                await client.send_code_request(account['phone'])
                print(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {account['phone']}")

                code = input(f"üì• –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è {account['phone']}: ")
                await client.sign_in(account['phone'], code)

                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account['phone']} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                result.session_created = True

            except FloodWaitError as e:
                wait_time = e.seconds
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π")
                await asyncio.sleep(wait_time)
                result.error = f"FloodWait: {wait_time} —Å–µ–∫—É–Ω–¥"
                return False

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
                result.error = str(e)
                return False

        else:
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account['phone']} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            result.session_created = True

        await client.disconnect()
        result.success = True
        return True

    except PhoneNumberBannedError:
        result.error = "–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {account['phone']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        return False

    except Exception as e:
        result.error = str(e)
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


async def auth_accounts_batch(accounts: List[Dict], semaphore: asyncio.Semaphore) -> List[AuthResult]:
    """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –≥—Ä—É–ø–ø—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"""
    results = [AuthResult(account['phone']) for account in accounts]

    async def auth_with_semaphore(account: Dict, result: AuthResult):
        async with semaphore:
            await auth_account(account, result)

    tasks = [
        asyncio.create_task(auth_with_semaphore(account, result))
        for account, result in zip(accounts, results)
    ]

    await asyncio.gather(*tasks)
    return results


async def save_auth_status(results: List[AuthResult]):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    status = {
        result.phone: {
            'success': result.success,
            'session_created': result.session_created,
            'error': result.error,
            'attempts': result.attempts
        }
        for result in results
    }

    with open(AUTH_STATUS_FILE, 'w') as f:
        json.dump(status, f, indent=2)


async def main():
    print(f"""
üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
===========================================
üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ACCOUNTS)}
‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–π: 3
‚Ä¢ –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏: 5 —Å–µ–∫—É–Ω–¥
""")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    cleaned = cleanup_sessions()
    print(f"üßπ –û—á–∏—â–µ–Ω–æ —Å–µ—Å—Å–∏–π: {cleaned}")

    # –†–∞–∑–±–∏–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 3
    batch_size = 3
    account_batches = [ACCOUNTS[i:i + batch_size] for i in range(0, len(ACCOUNTS), batch_size)]

    # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    semaphore = asyncio.Semaphore(3)

    all_results = []

    for batch_num, batch in enumerate(account_batches, 1):
        print(f"\nüì± –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã {batch_num}/{len(account_batches)}")

        results = await auth_accounts_batch(batch, semaphore)
        all_results.extend(results)

        successful = sum(1 for r in results if r.success)
        print(f"""
üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø—ã {batch_num}:
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful}/{len(batch)}
‚Ä¢ –° –æ—à–∏–±–∫–∞–º–∏: {len(batch) - successful}
""")

        if batch_num < len(account_batches):
            print("‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏...")
            await asyncio.sleep(10)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    await save_auth_status(all_results)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_successful = sum(1 for r in all_results if r.success)
    total_sessions = sum(1 for r in all_results if r.session_created)

    print(f"""
üìä –ò—Ç–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
===========================================
‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {total_successful}/{len(ACCOUNTS)}
üìÅ –°–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: {total_sessions}
‚ùå –û—à–∏–±–æ–∫: {len(ACCOUNTS) - total_successful}

üîç –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:""")

    for result in all_results:
        status = "‚úÖ" if result.success else "‚ùå"
        error_info = f" ({result.error})" if result.error else ""
        print(f"{status} {result.phone}{error_info}")

    print("""
üîÑ –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
""")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")