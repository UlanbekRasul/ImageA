# auth_accounts.py

import asyncio
from telethon import TelegramClient
import os
import random
from config import ACCOUNTS, ACCOUNT_SETTINGS


async def auth_account(account, session_files):
    print(f"\nüì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone']}")

    proxy = account['proxy']
    print(f"""
üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç: {account['phone']}
‚Ä¢ –ü—Ä–æ–∫—Å–∏: {proxy['hostname']}:{proxy['port']}
‚Ä¢ –õ–æ–≥–∏–Ω: {proxy['username']}
‚Ä¢ –ü–∞—Ä–æ–ª—å: {proxy['password']}
""")

    device_model = f"Samsung Galaxy S{random.randint(20, 23)}"
    system_version = f"Android {random.randint(10, 13)}.0"
    session_file = f"session_{account['phone']}.session"

    try:
        client = TelegramClient(
            session_file,
            account['api_id'],
            account['api_hash'],
            device_model=device_model,
            system_version=system_version,
            proxy={
                'proxy_type': proxy['scheme'],
                'addr': proxy['hostname'],
                'port': proxy['port'],
                'username': proxy['username'],
                'password': proxy['password'],
                'rdns': True  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            }
        )

        print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...")
        await client.connect()

        if not await client.is_user_authorized():
            print(f"üì± –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            try:
                await client.send_code_request(account['phone'])
                print(f"‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {account['phone']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {str(e)}")
                if "flood" in str(e).lower():
                    print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–æ–≤")
                    await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                return False

            code = input(f"üì• –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è {account['phone']}: ")
            await client.sign_in(account['phone'], code)
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account['phone']} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            session_files.append(session_file)
            await asyncio.sleep(5)

        else:
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account['phone']} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            session_files.append(session_file)

        await client.disconnect()
        return True

    except ConnectionError:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è {account['phone']}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False


async def main():
    print(f"""
üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
üìä –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(ACCOUNTS)}
‚Ä¢ –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {ACCOUNT_SETTINGS['batch_size']}
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: {ACCOUNT_SETTINGS['invites_per_run']}
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏: {ACCOUNT_SETTINGS['delay_between_adds']} —Å–µ–∫
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏: {ACCOUNT_SETTINGS['delay_between_accounts']} —Å–µ–∫
‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã: {ACCOUNT_SETTINGS['cooldown_hours']} —á–∞—Å–æ–≤
""")

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
    session_files = []
    for account in ACCOUNTS:
        session_file = f"session_{account['phone']}.session"
        if os.path.exists(session_file):
            os.remove(session_file)
            print(f"üóë –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")

    successful = 0
    total = len(ACCOUNTS)

    for i, account in enumerate(ACCOUNTS, 1):
        print(f"\nüë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {i}/{total}")
        try:
            if await auth_account(account, session_files):
                successful += 1
                print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {i}/{total} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {i}/{total}")

            if i < total:  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º
                await asyncio.sleep(5)

        except Exception as e:
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account['phone']}: {str(e)}")
            continue

    print(f"""
\nüìä –ò—Ç–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ: {successful}/{total} –∞–∫–∫–∞—É–Ω—Ç–æ–≤

üîÑ –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ main.py –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
""")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
